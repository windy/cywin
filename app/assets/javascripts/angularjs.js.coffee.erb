#= require angular-file-upload-shim
#= require angular
#= require angular-locale_zh-cn
#= require angular-cookie
#= require angular-resource
#= require angular-route
#= require angular-sanitize
#= require angular-file-upload
#= require mm-foundation-tpls-0.2.0
#= require_self
#= require angular-translation
#= require_tree ./angularjs

@app = angular.module('app', ['ngSanitize', 'ngRoute', 'angularFileUpload', 'mm.foundation', 'ipCookie', 'pascalprecht.translate'])

@app.config ["$httpProvider", '$routeProvider', ($httpProvider, $routeProvider) ->
    # 配置 json 与 csrf
    $httpProvider.defaults.headers.common['X-CSRF-Token'] = $('meta[name=csrf-token]').attr('content')
    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest'


    # 添加请求拦截器，将数据转换为表单格式以兼容Rails默认参数解析方式
    # 保存原始的 transformRequest 函数数组
    # originalTransformRequest = $httpProvider.defaults.transformRequest
    
    # 重写默认的 transformRequest
    # $httpProvider.defaults.transformRequest = [(data, headersGetter) ->
    #  headers = headersGetter()
      
      # 如果没有数据，或者已经是字符串，或者不是 POST/PUT/PATCH 请求，则使用原始转换
      # if !data || angular.isString(data) || headers['Content-Type'] == 'application/x-www-form-urlencoded'
      #  return data
      
      # 设置 Content-Type 为表单格式
      # headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8'
      # debugger
      # 将对象序列化为 Rails 兼容的表单格式
      # serializeData = (obj, prefix) ->
      #  str = []
      #  for p of obj
      #    if obj.hasOwnProperty(p)
      #      k = if prefix then prefix + "[" + p + "]" else p
      #      v = obj[p]
      #      
      #      if v != null && typeof v == 'object' && !Array.isArray(v)
      #        # 递归处理嵌套对象
      #        str.push(serializeData(v, k))
      #      else if Array.isArray(v)
      #        # 处理数组
      #        for i in [0...v.length]
      #          if typeof v[i] == 'object'
      #            str.push(serializeData(v[i], k + "[]"))
      #          else
      #            str.push(encodeURIComponent(k + "[]") + "=" + encodeURIComponent(v[i]))
      #      else
      #        # 处理基本类型
      #        str.push(encodeURIComponent(k) + "=" + encodeURIComponent(v))
      #  return str.join("&")
      
      # return serializeData(data)
    # ]
    
    # 将原始的 transformRequest 函数数组添加到新的数组中
    # if angular.isArray(originalTransformRequest)
    #  Array.prototype.push.apply($httpProvider.defaults.transformRequest, originalTransformRequest)
    # else if originalTransformRequest
    #  $httpProvider.defaults.transformRequest.push(originalTransformRequest)

    # 配置路由
    $routeProvider.when '/project/basic',
      templateUrl: '<%= asset_path('project/basic.html') %>'
      controller: 'ProjectCreateBasicController'
      title: '基本信息 - 创建项目'
    .when '/project/team',
      templateUrl: '<%= asset_path('project/team.html')%>'
      controller: 'ProjectCreateTeamController'
    .when '/project/require',
      templateUrl: '<%= asset_path('project/require.html')%>'
      controller: 'ProjectCreateRequireController'
    .otherwise
      redirectTo: '/project/basic'
]